import os
import pandas as pd
from dotenv import load_dotenv
import google.generativeai as genai

# ---------- ‡πÇ‡∏´‡∏•‡∏î API KEY ----------
load_dotenv()
API_KEY = os.getenv("gemini_api_key")

if not API_KEY:
    raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö GOOGLE_API_KEY ‡πÉ‡∏ô .env")

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ----------
df_task = pd.read_csv("suvarnabhumi_expansion_schedule.csv")
df_worker = pd.read_csv("worker_data.csv")

# ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ skill ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
df_worker_skill = df_worker['skill_type_name'].dropna().unique().tolist()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
task_list = []
for _, row in df_task.iterrows():
    task_name = str(row['task_name']).strip()
    sub_task = str(row['sub_task']).strip()
    task_list.append(f"- ‡∏á‡∏≤‡∏ô: {task_name}, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢: {sub_task}")

# ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô prompt
prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥
‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:

{', '.join(df_worker_skill)}

‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{chr(10).join(task_list)}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ"

‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: 
- ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô
- ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢
- ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ
"""

# ‡∏™‡πà‡∏á prompt ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LLM
try:
    response = model.generate_content(prompt)
except Exception as e:
    print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM: {e}")
    exit(1)

# DEBUG: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response
print("üßæ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å LLM:\n", response.text)

# ------------ ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô DataFrame ------------
results = []
lines = response.text.split('\n')
header_found = False
for line in lines:
    print(f"LINE: {line}")
    # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠ header
    if line.strip() and '|' in line and not line.startswith('|-'):
        if not header_found and '‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô' in line:
            header_found = True
            continue
        parts = [p.strip() for p in line.split('|') if p.strip()]
        if len(parts) >= 3:
            task_name, sub_task, skill = parts[:3]
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ start_date ‡πÅ‡∏•‡∏∞ end_date ‡∏à‡∏≤‡∏Å df_task
            match_row = df_task[
                (df_task['task_name'].astype(str).str.strip() == task_name) &
                (df_task['sub_task'].astype(str).str.strip() == sub_task)
            ]
            if not match_row.empty:
                start_date = match_row.iloc[0]['start_date']
                end_date = match_row.iloc[0]['end_date']
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏á‡∏≤‡∏ô: {task_name}, ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢: {sub_task}")
                start_date = "‡πÑ‡∏°‡πà‡∏û‡∏ö"
                end_date = "‡πÑ‡∏°‡πà‡∏û‡∏ö"
            results.append({
                "task_name": task_name,
                "sub_task": sub_task,
                "matched_skill": skill,
                "start_date": start_date,
                "end_date": end_date
            })

# ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
matched_df = pd.DataFrame(results)
if not matched_df.empty:
    matched_df.to_csv("matched_skills.csv", index=False, encoding='utf-8')
    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å matched_skills.csv ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    print("\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô matched_skills.csv:")
    print(matched_df.head())
else:
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")